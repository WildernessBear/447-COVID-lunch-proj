# Generated by Django 3.1.2 on 2020-12-08 08:36

from django.db import migrations
import random

# description should NOT be seen on website, it just describes if an item is a main dish, side, or drink
class Item:
    def __init__(self, name, description, prep, ingredient_ls):
        self.name = name
        self.description = description
        self.prep = prep
        self.ingredient_ls = ingredient_ls


def set_up_db(apps, schema_editor):
    main = "main"
    side = "side"
    drink = "drink"
    prep1 = "No preparation required"

    breakfast = "Breakfast"
    lunch = "Lunch"

    # just one school district
    district = "Baltimore County"

    schools = ["Arbutus Elementary", "Arbutus Middle", "Catonsville High", "Catonsville Middle", "Chesapeake High",
               "Cockeysville Middle", "Deep Creek Middle", "Deer Park Middle", "Dulaney High", "Dumbarton Middle",
               "Dundalk High", "Dundalk Middle", "Eastern Tech High", "Franklin High", "Franklin Middle",
               "Golden Ring Middle", "Hereford High", "Hereford Middle", "Holabird Middle", "Kenwood High",
               "Lansdowne High", "Lansdowne Middle", "Loch Raven High", "Middle River Middle", "Overlea High",
               "Owings Mills High", "Parkville High", "Parkville Middle", "Perry Hall High", "Perry Hall Middle",
               "Pikesville High", "Pikesville Middle", "Pine Grove Middle", "Randallstown High", "Ridgely Middle",
               "Stemmers Run Middle", "Towson High School", "Windsor Mill Middle", "Woodlawn High", "Woodlawn Middle"]

    # two types of menu, breakfast and lunch
    menu = ["Breakfast", "Lunch"]

    lunch_main_ls = [
        Item("Cheese Pizza", main, None,
             ["whole grain crust", "tomato sauce", "mozzarella cheese"]),
        Item("Pepperoni Pizza", main, None,
             ["whole grain crust", "tomato sauce", "mozzarella cheese", "pepperoni"]),
        Item("Chicken Patty Sandwich", main, None,
             ["chicken breast patty", "hamburger bun", "lettuce", "tomato"]),
        Item("PB & J Sandwich", main, None,
             ["peanut butter", "grape jelly", "whole grain bread"])
    ]

    lunch_side_ls = [
        Item("Choice of Seasonal Fruit", side, None,
             ["apple", "banana", "pear", "orange"]),
        Item("Yogurt Cup", side, None,
             ["Trix yogurt"]),
        Item("Choice of Chip Snack", side, None,
             ["Cheez-it Crackers", "Doritos Nacho Cheese", "Utz Classic Potato Chips",
              "Utz Salt and Vinegar Chips", "Famous Amos Chocolate Chip Cookies"]),
        Item("Vegetable Sticks with Ranch Dressing", side, None,
             ["celery", "carrots", "broccoli", "ranch dressing"])
    ]

    breakfast_main_ls = [
        Item("Assorted Cold Cereal", main, "Requires milk",
             ["Cinnamon Chex", "Frosted Mini Wheats", "Honey Nut Cheerios", "Raisin Bran"]),
        Item("Bagel and Cream Cheese", main, None,
             ["whole wheat bagel", "cream cheese"]),
        Item("Mini Cinnamon Rolls", main, None,
             ["cinnamon roll", "sugar frosting"])
    ]

    breakfast_side_ls = [
        Item("Applesauce Cup", side, None,
             ["applesauce", "cinnamon"]),
        Item("Choice of Seasonal Fruit", side, None,
             ["apple", "banana", "pear", "orange"])
    ]

    # same drinks for both breakfast and lunch
    drink_ls = [
        Item("1% White Milk", drink, None, None),
        Item("Fat Free White Milk", drink, None, None),
        Item("Fat Free Chocolate Milk", drink, None, None),
        Item("Fat Free Strawberry Milk", drink, None, None),
        Item("Orange Juice", drink, None, None),
        Item("Apple Juice", drink, None, None)
    ]

    # two menus per day, breakfast and lunch
    # one main per menu
    # sides and drinks all available

    # create our single school district
    SchoolDistrict = apps.get_model("Lapp", "SchoolDistrict")
    temp_district = SchoolDistrict.objects.create(name=district)

    # create the schools in the district
    for school in schools:
        temp_school = temp_district.school_set.create(name=school)

        # create pickup times
        timeAM = str(random.randint(7, 10)) + ":00AM"
        timePM = str(random.randint(2, 6)) + ":00PM"
        temp_school.time_set.create(name=timeAM)
        temp_school.time_set.create(name=timePM)

        # create menus for each school
        for day in range(5):
            # breakfast menu
            temp_breakfast = temp_school.menu_set.create(name=breakfast)

            # ### BREAKFAST ### #
            num = random.randint(0, len(breakfast_main_ls) - 1)
            temp_item = temp_breakfast.meal_set.create(name=breakfast_main_ls[num].name,
                                                       description=breakfast_main_ls[num].description,
                                                       prep=breakfast_main_ls[num].prep)

            # breakfast main course ingredients
            for ingredient in breakfast_main_ls[num].ingredient_ls:
                temp_item.ingredient_set.create(name=ingredient)

            # breakfast sides
            for item in breakfast_side_ls:
                temp_item = temp_breakfast.meal_set.create(name=item.name,
                                                           description=item.description,
                                                           prep=item.prep)
                for ingredient in item.ingredient_ls:
                    temp_item.ingredient_set.create(name=ingredient)

            # breakfast drink
            for item in drink_ls:
                temp_breakfast.meal_set.create(name=item.name, description=item.description, prep=item.prep)

            # ### LUNCH ### #
            temp_lunch = temp_school.menu_set.create(name=lunch)

            # lunch main course
            num = random.randint(0, len(lunch_main_ls) - 1)
            temp_item = temp_lunch.meal_set.create(name=lunch_main_ls[num].name,
                                                   description=lunch_main_ls[num].description,
                                                   prep=lunch_main_ls[num].prep)

            # lunch main course ingredients
            for ingredient in lunch_main_ls[num].ingredient_ls:
                temp_item.ingredient_set.create(name=ingredient)

            # lunch sides
            for item in lunch_side_ls:
                temp_item = temp_lunch.meal_set.create(name=item.name,
                                                       description=item.description,
                                                       prep=item.prep)
                for ingredient in item.ingredient_ls:
                    temp_item.ingredient_set.create(name=ingredient)

            # lunch drink
            for item in drink_ls:
                temp_lunch.meal_set.create(name=item.name, description=item.description, prep=item.prep)


class Migration(migrations.Migration):

    dependencies = [
        ('Lapp', '0002_db_setup'),
    ]

    operations = [
        migrations.RunPython(set_up_db),
    ]
